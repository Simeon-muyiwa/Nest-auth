- name: Clone or update the NestJS repository
  git:
    repo: "{{ repo_path }}"
    dest: "{{ service_path }}"
    version: main
    update: yes
    force: yes
  register: repo_clone
  delegate_to: localhost
  become: true

- name: Debug Git module
  debug:
    var: repo_clone

- name: Check if destination directory exists
  stat:
    path: "{{ service_path }}"
  register: dir_exists
  changed_when: false

- name: Fail if destination directory does not exist
  fail:
    msg: "Destination directory {{ service_path }} does not exist"
  when: not dir_exists.stat.exists

- name: Synchronize MyK8sAnsible folder to myk8sansible/myportal
  synchronize:
    src: "{{ service_path }}"
    dest: "/myk8sansible/myportal/"
    delete: yes
  when: repo_clone.changed

- name: Archive NestJS application excluding MyK8sAnsible
  archive:
    path: "{{ service_path }}"
    dest: "/tmp/nestjs-app-archive.tar.gz"
    format: gz
    exclude:
      - "myportal" # Correctly using exclude option
  when: repo_clone.changed

- name: Encode archive content in base64
  set_fact:
    base64_content: "{{ lookup('pipe', 'base64 /tmp/nestjs-app-archive.tar.gz') }}"
  when: repo_clone.changed

- name: Debug Base64 encoded content
  debug:
    msg: "Base64 content length: {{ base64_content | length }}"
  when: repo_clone.changed

# - name: Wait for Kubernetes job to complete
#   k8s_info:
#     kind: Job
#     name: read-archive-job
#     namespace: your-namespace  # Replace with your actual namespace
#   register: job_info
#   until: job_info.resources | length > 0 and job_info.resources[0].status.succeeded == 1
#   retries: 10
#   delay: 5

- name: Remove the archive file to keep /tmp clean
  file:
    path: "/tmp/nestjs-app-archive.tar.gz"
    state: absent
  when: repo_clone.changed
