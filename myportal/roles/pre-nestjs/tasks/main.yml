---
- name: Clone or update the NestJS repository
  git:
    repo: '{{ repo_path }}'
    dest: /opt/nestjs/MyK8sAnsible/myportal  # This is where the repo will be cloned
    version: main
    update: yes
  register: repo_clone

- name: Ensure destination directory exists in Minikube env
  ansible.builtin.file:
    path: /path/to/myk8sansible/myportal  # Adjusted path to reflect your setup
    state: directory

- name: Synchronize MyK8sAnsible folder to myk8sansible/myportal
  ansible.builtin.synchronize:
    src: /opt/nestjs/MyK8sAnsible/myportal/  # Source directory for synchronization
    dest: /path/to/myk8sansible/myportal/      # Destination directory for synchronization
    delete: yes
  when: repo_clone.changed  # Only run if the repository was updated

- name: Check if the archive already exists
  ansible.builtin.stat:
    path: /tmp/nestjs-app-archive.tar.gz
  register: archive_stat

- name: Remove existing archive if it exists
  ansible.builtin.file:
    path: /tmp/nestjs-app-archive.tar.gz
    state: absent
  when: archive_stat.stat.exists

- name: Archive NestJS application excluding MyK8sAnsible
  ansible.builtin.archive:
    path: /opt/nestjs
    exclude_path: /opt/nestjs/MyK8sAnsible  # Exclude the MyK8sAnsible directory
    dest: /tmp/nestjs-app-archive.tar.gz
    format: gz

- name: Encode archive content in base64
  set_fact:
    base64_content: "{{ lookup('pipe', 'base64 /tmp/nestjs-app-archive.tar.gz') }}"

- name: Create ConfigMap manifest from template
  ansible.builtin.template:
    src: roles/nestjs-deploy/templates/nestjs-configmap.yml
    dest: /tmp/configmap.yml
  vars:
    base64_content: '{{ base64_content }}'
    portalname: '{{ portalname }}'
    namespace: '{{ namespace }}'

- name: Display decoded ConfigMap content
  ansible.builtin.debug:
    msg: "{{ base64_content }}"