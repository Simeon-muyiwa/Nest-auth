- name: Clone or update the NestJS repository
  git:
    repo: '{{ repo_path }}'
    dest: '{{ service_path }}'
    version: main
    update: yes
    force: yes
  register: repo_clone
  delegate_to: localhost
  become: true

- name: Debug Git module
  debug:
    var: repo_clone

- name: Check if destination directory exists
  stat:
    path: "{{ service_path }}"
  register: dir_exists
  changed_when: false

- name: Fail if destination directory does not exist
  fail:
    msg: "Destination directory {{ service_path }} does not exist"
  when: not dir_exists.stat.exists

- name: Synchronize MyK8sAnsible folder to myk8sansible/myportal
  synchronize:
    src: /opt/nestjs/myportal/
    dest: /myk8sansible/myportal/
    delete: yes
  when: repo_clone.changed

- name: Archive NestJS application excluding MyK8sAnsible
  archive:
    path: /opt/nestjs
    exclude_path: /opt/nestjs/myportal
    dest: /tmp/nestjs-app-archive.tar.gz
    format: gz
  when: repo_clone.changed

# - name: Remove service_path
#   file:
#     path: '{{ service_path }}'
#     state: absent
#   when: repo_clone.changed

- name: Encode archive content in base64
  set_fact:
    base64_content: "{{ lookup('pipe', 'base64 /tmp/nestjs-app-archive.tar.gz') }}"
  when: repo_clone.changed
# - name: Create ConfigMap manifest from template
#   ansible.builtin.template:
#     src: /myk8sansible/myportal/roles/nestjs-deploy/templates/nestjs-configmap.yml
#     dest: /tmp/configmap.yml
#   vars:
#     base64_content: '{{ base64_content }}'
#     portalname: '{{ portalname }}'
#     namespace: '{{ namespace }}'

# - name: Display decoded ConfigMap content
#   ansible.builtin.debug:
#     msg: "{{ base64_content }}"