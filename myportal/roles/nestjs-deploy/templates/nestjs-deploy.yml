apiVersion: apps/v1
kind: Deployment
metadata:
  name: nestjs-auth
  namespace: portal1
  labels:
    app: nestjs-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nestjs-auth
  template:
    metadata:
      labels:
        app: nestjs-auth
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      volumes:
        - name: jwt-secrets
          secret:
            secretName: jwt-secrets
        - name: postgresql-secret
          secret:
            secretName: postgresql-secret
        - name: nestjs-volume
          persistentVolumeClaim:
            claimName: nestjs-pvc
        - name: init-volume
          persistentVolumeClaim:
            claimName: "{{ portalname }}-pvc"
        - name: data-volume
          emptyDir: {}
      initContainers:
        - name: init-permissions
          image: node:20-alpine
          volumeMounts:
            - name: jwt-secrets
              mountPath: /etc/jwt-secrets
              readOnly: true
            - name: postgresql-secret
              mountPath: /etc/postgresql-secret
              readOnly: true
            - name: nestjs-volume
              mountPath: /nestjs
            - name: init-volume
              mountPath: /init
            - name: data-volume
              mountPath: /data
          command: ["/bin/sh"]
          args:
            - -c
            - |
              set -e
              # Copy files from secrets to the shared data volume
              for key in JWT_ACCESS_TOKEN_TTL JWT_REFRESH_TOKEN_TTL JWT_TOKEN_SECRET; do
                if [ -f /etc/jwt-secrets/$key ]; then
                  cp /etc/jwt-secrets/$key /data/$key
                else
                  echo "Error: /etc/jwt-secrets/$key not found."
                  exit 1
                fi
              done
              if [ ! -d /nestjs ]; then
                echo "Error: NestJS application files not found in /nestjs. Exiting."
                exit 1
              fi

      containers:
        - name: nestjs-auth
          image: node:20-alpine
          volumeMounts:
            - name: jwt-secrets
              mountPath: /etc/jwt-secrets
              readOnly: true
            - name: postgresql-secret
              mountPath: /etc/postgresql-secret
              readOnly: true
            - name: nestjs-volume
              mountPath: /nestjs
            - name: init-volume
              mountPath: /init
            - name: data-volume
              mountPath: /data
          command: ["/bin/sh"]
          args:
            - -c
            - |
              set -e
              cd /nestjs || { echo "Failed to change directory"; exit 1; }
              npm install
              npm run build
              npm start
          env:
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
            - name: JWT_TOKEN_SECRET
              valueFrom:
                fieldRef:
                  fieldPath: /data/JWT_TOKEN_SECRET
            - name: JWT_ACCESS_TOKEN_TTL
              valueFrom:
                fieldRef:
                  fieldPath: /data/JWT_ACCESS_TOKEN_TTL
            - name: JWT_REFRESH_TOKEN_TTL
              valueFrom:
                fieldRef:
                  fieldPath: /data/JWT_REFRESH_TOKEN_TTL
            - name: JWT_TOKEN_AUDIENCE
              value: "{{ portalname }}.default.svc.cluster.local"
            - name: JWT_TOKEN_ISSUER
              value: "{{ portalname }}.default.svc.cluster.local"
          envFrom:
            - secretRef:
                name: jwt-secrets
              prefix: JWT_
            - secretRef:
                name: postgresql-secret
              prefix: POSTGRES_
            - configMapRef:
                name: postgresql-configmap
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
