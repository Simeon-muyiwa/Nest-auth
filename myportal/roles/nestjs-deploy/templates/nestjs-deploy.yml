apiVersion: apps/v1
kind: Deployment
metadata:
  name: { { portalname } }
  namespace: { { namespace } }
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nestjs-auth
  template:
    metadata:
      labels:
        app: nestjs-auth
  spec:
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
    volumes:
      - name: jwt-secrets
        secret:
          secretName: jwt-secrets
      - name: postgresql-secret
        secret:
          secretName: postgresql-secret
      - name: nestjs-volume
        persistentVolumeClaim:
          claimName: nestjs-pvc
  containers:
    - name: nestjs-auth
      image: node:20-alpine
      volumeMounts:
        - name: jwt-secrets
          mountPath: /etc/jwt-secrets
        - name: postgresql-secret
          mountPath: /etc/postgresql-secret
        - name: nestjs-volume
          mountPath: /nestjs
      command:
        - /bin/sh
      args:
        - -c
        - |
          set -e

          chown -R 1000:1000 /etc/jwt-secrets /etc/postgresql-secret /nestjs

          for key in JWT_ACCESS_TOKEN_TTL JWT_REFRESH_TOKEN_TTL JWT_TOKEN_SECRET; do
            if [ -f /etc/jwt-secrets/$key ]; then
              cp /etc/jwt-secrets/$key /nestjs/.env.jwt
            else
              echo "Error: /etc/jwt-secrets/$key not found."
              exit 1
            fi
          done

          if [ ! -d /nestjs ]; then
            echo "Error: NestJS application files not found in /nestjs . Exiting."
            exit 1
          fi

          cd /nestjs || { echo "Failed to change directory"; exit 1; }

          npm install
          npm run build
          npm start
      env:
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: JWT_TOKEN_SECRET
          value: "{{ jwt_token_secret | default('your_default_value') }}"
        - name: JWT_ACCESS_TOKEN_TTL
          value: "{{ jwt_access_token_ttl | default('3600') }}"
        - name: JWT_REFRESH_TOKEN_TTL
          value: "{{ jwt_refresh_token_ttl | default('86400') }}"
        - name: JWT_TOKEN_AUDIENCE
          value: "{{ portalname }}.default.svc.cluster.local"
        - name: JWT_TOKEN_ISSUER
          value: "{{ portalname }}.default.svc.cluster.local"
      envFrom:
        - secretRef:
            name: jwt-secrets
          prefix: JWT_
        - secretRef:
            name: postgresql-secret
          prefix: POSTGRES_
        - configMapRef:
            name: postgresql-configmap
