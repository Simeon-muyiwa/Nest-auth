# Deploying ConfigMap, Secret, Deployment, Service, Ingress for each portal
- name: Set default value for base64_content
  set_fact:
    base64_content: ""  # Defaulting to an empty string to avoid 'undefined' error

- name: Encode archive content in base64
  set_fact:
    base64_content: "{{ lookup('pipe', 'base64 /tmp/nestjs-app-archive.tar.gz') }}"
  when: has_changes

- name: Debug base64_content
  debug:
    msg: "Base64 Content: {{ base64_content }}"
  when: base64_content != ""

- name: Deploy ConfigMap for each portal
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'nestjs-configmap.yml', template_vars=dict(portalname=item.name, namespace=tenant.namespace, base64_content=base64_content)) | from_yaml }}"
    state: present
  loop: "{{ mytenants | map(attribute='portals') | list | flatten }}"
  loop_control:
    loop_var: item
  vars:
    tenant: "{{ mytenants | selectattr('portals', 'contains', item) | first }}"
  when: base64_content != ""  # Proceed only if base64_content has been set

- name: Create nestjs Secret for each portal
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'nestjs-secret-env.yml', template_vars=dict(portalname=portal.name, namespace=tenant.namespace, jwt_token_secret=jwt_token_secret, jwt_access_token_ttl=jwt_access_token_ttl, jwt_refresh_token_ttl=jwt_refresh_token_ttl)) | from_yaml }}"
    state: present
  loop: "{{ mytenants | map(attribute='portals') | list | flatten }}"
  loop_control:
    loop_var: portal
  vars:
    tenant: "{{ mytenants | selectattr('portals', 'contains', portal) | first }}"
    jwt_token_secret: "{{ portal.jwt_token_secret | default('your_default_value') }}"  # Add a default value
    jwt_access_token_ttl: "{{ portal.jwt_access_token_ttl | default(3600) }}"  # Example default TTL
    jwt_refresh_token_ttl: "{{ portal.jwt_refresh_token_ttl | default(86400) }}"  # Example default TTL
    namespace: "{{ tenant.namespace if tenant is not none else 'default' }}"

- name: Create nestjs deployments/replicasets and pods for each portal
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'nestjs-deploy.yml', template_vars=dict(portalname=item.name, namespace=tenant.namespace, replicacount=item.replicacount)) | from_yaml }}"
    state: present
  loop: "{{ mytenants | map(attribute='portals') | list | flatten }}"
  loop_control:
    loop_var: item
  vars:
    tenant: "{{ mytenants | selectattr('portals', 'contains', item) | first }}"

- name: Create nestjs services for each portal
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'nestjs-service.yml', template_vars=dict(portalname=item.name, namespace=tenant.namespace)) | from_yaml }}"
    state: present
  loop: "{{ mytenants | map(attribute='portals') | list | flatten }}"
  loop_control:
    loop_var: item
  vars:
    tenant: "{{ mytenants | selectattr('portals', 'contains', item) | first }}"

- name: Create nestjs ingress for each portal
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'nestjs-ingress.yml', template_vars=dict(namespace=tenant.namespace)) | from_yaml }}"
    state: present
  loop: "{{ mytenants | map(attribute='portals') | list | flatten }}"
  loop_control:
    loop_var: item
  vars:
    tenant: "{{ mytenants | selectattr('portals', 'contains', item) | first }}"

