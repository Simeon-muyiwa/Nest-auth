# - name: Create config maps
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template', 'nestjs-config.yml', template_vars=dict(portalname=item.name, namespace=ansible_operator_meta.namespace)) | from_yaml }}"
#     state: present
#   loop: "{{ myportals }}"

# - name: Create jwt-config for each portal
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template', 'jwt-config.yml', template_vars=dict(
#       )) | from_yaml }}"
#     state: present
#   # loop: "{{ myportals }}"

# - name: Create portal deployments/replicasets and pods
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template', 'nestjs-deploy.yml', template_vars=dict(portalname=item.name, namespace=item.namespace, image=item.image_tag, replicacount=item.replicacount)) | from_yaml }}"
#     state: present
#   loop: "{{ myportals }}"

# - name: Create nestjs services for each portal
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template', 'nestjs-service.yml', template_vars=dict(
#       portalname=item.name,
#       replicacount=item.replicacount | default(1),

#       )) | from_yaml }}"
#     state: present
#   loop: "{{ myportals }}"

- name: Create nestjs ingress for each portal
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'nestjs-ingress.yml', template_vars=dict(

      mytenantname=mytenantname)) | from_yaml }}"
    state: present
  loop: "{{ myportals }}"
# - name: Create nestjs Secret for each portal
#   community.kubernetes.k8s:
#     definition:
#       "{{ lookup('template', 'jwt-secrets.env.yml', template_vars=dict(
#       namespace=ansible_operator_meta.namespace,
#       mytenantname=mytenantname,
#       jwt_token_secret=item.config.jwt_token_secret | default('your_default_value'),
#       jwt_access_token_ttl=item.config.jwt_access_token_ttl | default(3600),
#       jwt_refresh_token_ttl=item.config.jwt_refresh_token_ttl | default(86400))) | from_yaml }}"
#     state: present
#   loop: "{{ myportals }}"
