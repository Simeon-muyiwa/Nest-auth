
    - name: Update and upgrade APT packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Clean up APT cache
      apt:
        autoclean: yes

    - name: Ensure curl is installed
      apt:
        name: curl
        state: present

    - name: Add GPG key for Node.js
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add Node.js repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes
      vars:
        node_version: "20"  # Specify the desired Node.js version

    - name: Install build dependencies
      apt:
        name:
          - build-essential
          - libssl-dev
        state: present

    - name: Check for Node.js installation
      command: node -v
      register: node_installed
      ignore_errors: true

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
      when: node_installed.rc != 0

    - name: Check for npm installation
      command: npm -v
      register: npm_installed
      ignore_errors: true

    - name: Upgrade npm if necessary
      command: npm install -g npm@latest
      when: npm_installed.rc == 0

    - name: Install service dependencies
      community.general.npm:
        path: "{{ service_path }}"
        state: present
      register: npm_install
      ignore_errors: true  # Optional: decide how to handle errors

    - name: Build the NestJS service
      command: npm run build
      args:
        chdir: "{{ service_path }}"
      register: build_output
      failed_when: build_output.rc != 0  # Fail if the build command fails

    - name: Start the service
      ansible.builtin.command: npm run start
      args:
        chdir: "{{ service_path }}"
      async: 180
      poll: 0
      register: start_service
      failed_when: start_service.rc != 0  # Optional: fail if the start command fails

    - name: Wait for service to start
      async_status:
        jid: "{{ start_service.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 10
      delay: 10