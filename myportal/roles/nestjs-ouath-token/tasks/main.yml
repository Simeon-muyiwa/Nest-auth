- name: Attempt Sign-in to check if user exists
  ansible.builtin.uri:
    url: "http://10.244.0.152:3000/authentication/sign-in"
    method: POST
    body: '{"email": "user3@nestjs.com", "password": "Password!323"}'
    body_format: json
    return_content: yes
  register: signin_response
  ignore_errors: true # Continue playbook even if sign-in fails

- name: Proceed with Sign Up if Sign In Failed (User does not exist)
  ansible.builtin.uri:
    url: "http://10.244.0.152:3000/authentication/sign-up"
    method: POST
    body: '{"email": "user3@nestjs.com", "password": "Password!323"}'
    body_format: json
    return_content: yes
  register: signup_response
  when: signin_response is defined and signin_response.status != 200 # Sign in failed
  failed_when: signup_response.status != 201 # Ensure sign-up is successful

- name: Sign-in after successful sign-up to get access token
  ansible.builtin.uri:
    url: "http://10.244.0.152:3000/authentication/sign-in"
    method: POST
    body: '{"email": "user3@nestjs.com", "password": "Password!323"}'
    body_format: json
    return_content: yes
  register: signin_after_signup_response
  when: signup_response is defined and signup_response.status == 201 # Proceed only if sign-up is successful

- name: Extract accessToken from sign-in response after sign-up
  set_fact:
    auth_token: "{{ signin_after_signup_response.json.accessToken }}"
  when: signin_after_signup_response is defined and signin_after_signup_response.status == 200 # Sign-in after signup is successful

- name: Check accessToken in response
  debug:
    msg: "Access Token obtained: {{ auth_token }}"
  when: auth_token != '' # Only run this task if auth_token is not empty

- name: Ensure accessToken is present
  assert:
    that:
      - auth_token is defined
      - auth_token != '' # Ensure that the access token is not empty

- name: GET request with Bearer token and JSON payload to protected route
  ansible.builtin.uri:
    url: "http://10.244.0.152:3000/coffees"
    method: GET
    headers:
      Authorization: "Bearer {{ auth_token }}"
      Content-Type: "application/json"
    body: '{"email": "user2@nestjs.com", "password": "Password!223"}'
    body_format: json
    return_content: yes
  register: get_api_response
  failed_when: get_api_response.status != 200
# - name: Debug the signup response
#   debug:
#     msg: "Signup Response: {{ signup_response }}"

# - name: Ensure signup response contains data
#   fail:
#     msg: "Signup failed, no token data received."
#   when: signup_response.content | length == 0

# - name: Extract Auth and Refresh Tokens
#   set_fact:
#     auth_token: "{{ signup_response.content | from_json | json_query('token') }}"
#     refresh_token: "{{ signup_response.content | from_json | json_query('refresh_token') }}"
#   when: signup_response.content | length > 0
#   failed_when: signup_response.content | length == 0

# - name: Extract Auth and Refresh Tokens
#   set_fact:
#     auth_token: "{{ signup_response.json.token }}"
#     refresh_token: "{{ signup_response.json.refresh_token }}"

# - name: Make a GET request with Bearer token
#   ansible.builtin.uri:
#     url: http://first-tenant/authentication/sign-in
#     method: GET
#     headers:
#       Authorization: "Bearer {{ auth_token }}"
#     return_content: yes
#   register: get_api_response
#   failed_when: get_api_response.status != 200

# - name: Print the API response
#   ansible.builtin.debug:
#     msg: "{{ get_api_response.content }} (Status: {{ get_api_response.status }})"

# - name: Refresh Auth Token
#   ansible.builtin.uri:
#     url: http://localhost/authentication/refresh
#     method: POST
#     body:
#       refresh_token: "{{ refresh_token }}"
#     body_format: json
#     return_content: yes
#   register: refresh_response
#   failed_when: "'token' not in refresh_response.json"

# - name: Extract New Auth Token
#   set_fact:
#     auth_token: "{{ refresh_response.json.token }}"

# - name: GET request with Bearer token and JSON payload to protected route
#   ansible.builtin.uri:
#     url: http://localhost/coffees
#     method: GET
#     headers:
#       Authorization: "Bearer {{ auth_token }}"
#       Content-Type: "application/json"
#     body: { "email": "user2@nestjs.com", "password": "Password!223" }
#     body_format: json
#     return_content: yes
#   register: get_api_response
#   failed_when: get_api_response.status != 200
# - name: Print the API response
#   ansible.builtin.debug:
#     msg: "{{ post_api_response.content }} (Status: {{ post_api_response.status }})"
