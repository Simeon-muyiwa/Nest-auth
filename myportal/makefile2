# VERSION?= 0.0.1

# ifneq ($(origin CHANNELS), undefined)
# BUNDLE_CHANNELS := --channels=$(CHANNELS)
# endif

# ifneq ($(origin DEFAULT_CHANNEL), undefined)
# BUNDLE_DEFAULT_CHANNEL := --default-channel=$(DEFAULT_CHANNEL)
# endif
# BUNDLE_METADATA_OPTS?= $(BUNDLE_CHANNELS) $(BUNDLE_DEFAULT_CHANNEL)

# IMAGE_TAG_BASE?= mycourse1.com/myportal

# BUNDLE_IMG?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)

# BUNDLE_GEN_FLAGS?= -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)

# USE_IMAGE_DIGESTS?= false
# ifeq ($(USE_IMAGE_DIGESTS), true)
# 	BUNDLE_GEN_FLAGS += --use-image-digests
# endif

# OPERATOR_SDK_VERSION?= v1.33.0

# IMG?= controller:latest

# .PHONY: all
# all: docker-build

# .PHONY: help
# help: 
# 	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) }'$(MAKEFILE_LIST)

# .PHONY: run
# ANSIBLE_ROLES_PATH?="$(shell pwd)/roles"
# run: ansible-operator 

# .PHONY: docker-build
# docker-build: 
# 	docker build -t ${IMG}.

# .PHONY: docker-push
# docker-push: 
# 	docker push ${IMG}

# PLATFORMS?= linux/arm64,linux/amd64,linux/s390x,linux/ppc64le
# .PHONY: docker-buildx
# docker-buildx: test 
# 	sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e'1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
# 	- docker buildx create --name project-v3-builder
# 	docker buildx use project-v3-builder
# 	- docker buildx build --push --platform=$(PLATFORMS) --tag ${IMG} -f Dockerfile.cross.
# 	- docker buildx rm project-v3-builder
# 	rm Dockerfile.cross

# .PHONY: install
# install: kustomize 
# 	$(KUSTOMIZE) build config/crd | kubectl apply -f -

# .PHONY: uninstall
# uninstall: kustomize 
# 	$(KUSTOMIZE) build config/crd | kubectl delete -f -

# .PHONY: deploy
# deploy: kustomize 
# 	cd config/manager && $(KUSTOMIZE) edit set image controller=$(IMG)
# 	$(KUSTOMIZE) build config/default | kubectl apply -f -

# .PHONY: undeploy
# undeploy: 
# 	$(KUSTOMIZE) build config/default | kubectl delete -f -

# OS := $(shell uname -s | tr '[:upper:]' '[:lower:]')
# ARCH := $(shell uname -m | sed's/x86_64/amd64/' | sed's/aarch64/arm64/')

# .PHONY: kustomize
# KUSTOMIZE = $(shell pwd)/bin/kustomize
# kustomize: 
# 	ifeq (,$(wildcard $(KUSTOMIZE)))
# 	ifeq (,$(shell which kustomize 2>/dev/null))
# 	@{ \
# 	set -e ;\
# 	mkdir -p $(dir $(KUSTOMIZE)) ;\
# 	curl -sSLo - https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.0.1/kustomize_v5.0.1_$(OS)_$(ARCH).tar.gz | \
# 	tar xzf - -C bin/ ;\
# 	}
# 	else
# 	KUSTOMIZE = $(shell which kustomize)
# 	endif
# endif

# .PHONY: ansible-operator
# ANSIBLE_OPERATOR = $(shell pwd)/bin/ansible-operator
# ansible-operator: 
# 	ifeq (,$(wildcard $(ANSIBLE_OPERATOR)))
# 	ifeq (,$(shell which ansible-operator 2>/dev/null))
# 	@{ \
# 	set -e ;\
# 	mkdir -p $(dir $(ANSIBLE_OPERATOR)) ;\
# 	curl -sSLo $(ANSIBLE_OPERATOR) https://github.com/operator-framework/ansible-operator-plugins/releases/download/v1.33.0/ansible-operator_$(OS)_$(ARCH) ;\
# 	chmod +x $(ANSIBLE_OPERATOR) ;\
# 	}
# 	else
# 	ANSIBLE_OPERATOR = $(shell which ansible-operator)
# 	endif
# 	endif

# .PHONY: operator-sdk
# OPERATOR_SDK?=./bin/operator-sdk
# operator-sdk: 
# 	ifeq (,$(wildcard $(OPERATOR_SDK)))
# 	ifeq (,$(shell which operator-sdk 2>/dev/null))
# 	@{ \
# 	set -e ;\
# 	mkdir -p $(dir $(OPERATOR_SDK)) ;\
# 	curl -sSLo $(OPERATOR_SDK) https://github.com/operator-framework/operator-sdk/releases/download/$(OPERATOR_SDK_VERSION)/operator-sdk_$(OS)_$(ARCH) ;\
# 	chmod +x $(OPERATOR_SDK) ;\
# 	}
# 	else
# 	OPERATOR_SDK = $(shell which operator-sdk)
# 	endif
# 	endif

# .PHONY: bundle
# bundle: kustomize operator-sdk 
# 	$(OPERATOR_SDK) generate kustomize manifests -q
# 	cd config/manager && $(KUSTOMIZE) edit set image controller=$(IMG)
# 	$(KUSTOMIZE) build config/manifests | $(OPERATOR_SDK) generate bundle $(BUNDLE_GEN_FLAGS)
# 	$(OPERATOR_SDK) bundle validate./bundle

# .PHONY: bundle-build
# bundle-build: 
# 	docker build -f bundle.Dockerfile -t $(BUNDLE_IMG).

# .PHONY: bundle-push
# bundle-push: 
# 	$(MAKE) docker-push IMG=$(BUNDLE_IMG)

# .PHONY: opm
# OPM =./bin/opm
# opm: 
# 	ifeq (,$(wildcard $(OPM)))
# 	ifeq (,$(shell which opm 2>/dev/null))
# 	@{ \
# 	set -e ;\
# 	mkdir -p $(dir $(OPM)) ;\
# 	curl -sSLo $(OPM) https://github.com/operator-framework/operator-registry/releases/download/v1.23.0/$(OS)-$(ARCH)-opm ;\
# 	chmod +x $(OPM) ;\
# 	}
# 	else
# 	OPM = $(shell which opm)
# 	endif
# 	endif

# BUNDLE_IMGS?= $(BUNDLE_IMG)

# CATALOG_IMG?= $(IMAGE_TAG_BASE)-catalog:v$(VERSION)

# ifneq ($(origin CATALOG_BASE_IMG), undefined)
# FROM_INDEX_OPT := --from-index $(CATALOG_BASE_IMG)
# endif

# .PHONY: catalog-build
# catalog-build: opm 
# 	$(OPM) index add --container-tool docker --mode semver --tag $(CATALOG_IMG) --bundles $(BUNDLE_IMGS) $(FROM_INDEX_OPT)

# .PHONY: catalog-push
# catalog-push: 
# 	$(MAKE) docker-push IMG=$(CATALOG_IMG)